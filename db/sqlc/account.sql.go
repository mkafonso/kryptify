// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (name, email, password_hash)
VALUES ($1, $2, $3)
RETURNING id, name, email, avatar_url, is_account_verified, password_hash, created_at, updated_at
`

type CreateAccountParams struct {
	Name         string `json:"name"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

// Create a new account
// Parameters: name, email, password_hash
// Returns: Newly created account
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount, arg.Name, arg.Email, arg.PasswordHash)
	return err
}

const findAccountByEmail = `-- name: FindAccountByEmail :one
SELECT id, name, email, avatar_url, is_account_verified, password_hash, created_at, updated_at FROM accounts
WHERE email = $1
LIMIT 1
`

// Find an account by email
// Parameters: email
// Returns: Single account matching the email
func (q *Queries) FindAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, findAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.AvatarUrl,
		&i.IsAccountVerified,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, name, email, avatar_url, is_account_verified, password_hash, created_at, updated_at FROM accounts
WHERE id = $1
LIMIT 1
`

// Get an account by ID
// Parameters: id
// Returns: Single account matching the ID
func (q *Queries) GetAccountByID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.AvatarUrl,
		&i.IsAccountVerified,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts
SET
    name = $1,
    avatar_url = $2,
    password_hash = $3,
    updated_at = $4
WHERE email = $5
RETURNING id, name, email, avatar_url, is_account_verified, password_hash, created_at, updated_at
`

type UpdateAccountParams struct {
	Name         string         `json:"name"`
	AvatarUrl    sql.NullString `json:"avatar_url"`
	PasswordHash string         `json:"password_hash"`
	UpdatedAt    time.Time      `json:"updated_at"`
	Email        string         `json:"email"`
}

// Update an account by email
// Parameters: name, avatar_url, password_hash, updated_at, email
// Returns: Updated account
func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount,
		arg.Name,
		arg.AvatarUrl,
		arg.PasswordHash,
		arg.UpdatedAt,
		arg.Email,
	)
	return err
}
