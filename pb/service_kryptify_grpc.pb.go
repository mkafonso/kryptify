// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: service_kryptify.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KryptifyServiceClient is the client API for KryptifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KryptifyServiceClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
}

type kryptifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKryptifyServiceClient(cc grpc.ClientConnInterface) KryptifyServiceClient {
	return &kryptifyServiceClient{cc}
}

func (c *kryptifyServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/pb.KryptifyService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kryptifyServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/pb.KryptifyService/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KryptifyServiceServer is the server API for KryptifyService service.
// All implementations must embed UnimplementedKryptifyServiceServer
// for forward compatibility
type KryptifyServiceServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	mustEmbedUnimplementedKryptifyServiceServer()
}

// UnimplementedKryptifyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKryptifyServiceServer struct {
}

func (UnimplementedKryptifyServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedKryptifyServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedKryptifyServiceServer) mustEmbedUnimplementedKryptifyServiceServer() {}

// UnsafeKryptifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KryptifyServiceServer will
// result in compilation errors.
type UnsafeKryptifyServiceServer interface {
	mustEmbedUnimplementedKryptifyServiceServer()
}

func RegisterKryptifyServiceServer(s grpc.ServiceRegistrar, srv KryptifyServiceServer) {
	s.RegisterService(&KryptifyService_ServiceDesc, srv)
}

func _KryptifyService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KryptifyServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KryptifyService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KryptifyServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KryptifyService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KryptifyServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KryptifyService/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KryptifyServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KryptifyService_ServiceDesc is the grpc.ServiceDesc for KryptifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KryptifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.KryptifyService",
	HandlerType: (*KryptifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _KryptifyService_CreateAccount_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _KryptifyService_CreateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_kryptify.proto",
}
